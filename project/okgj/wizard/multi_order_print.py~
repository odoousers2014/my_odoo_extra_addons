# -*- coding: utf-8 -*-
from openerp.osv import fields, osv
import openerp.addons.decimal_precision as dp
from openerp.tools.translate import _
import uuid

#汇拣单打印
class okgj_multi_order_print(osv.osv):
    _name = "okgj.multi.order.print"
    _inherit = ['mail.thread', 'ir.needaction_mixin']
okgj_multi_order_print()

class okgj_multi_order_print_line(osv.osv):
    _name = "okgj.multi.order.print.line"
okgj_multi_order_print_line()

class okgj_stock_picking_collect_temp(osv.osv):
    _inherit = "stock.picking"
    _columns = {
        'collect_ids':fields.many2many('okgj.multi.order.print', 'picking_multi_rel', 'picking_id', 'multi_id', u'汇拣单'),
    }
okgj_stock_picking_collect_temp()

class okgj_stock_picking_collect(osv.osv):
    _inherit = "stock.picking.out"
    _columns = {
        'collect_ids':fields.many2many('okgj.multi.order.print', 'picking_multi_rel', 'picking_id', 'multi_id', u'汇拣单'),
    }

class okgj_multi_order_print_line(osv.osv):
    _inherit = "okgj.multi.order.print.line"
    _columns = {
        'print_id':fields.many2one('okgj.multi.order.print', 'Print'),
        'product_id':fields.many2one('product.product', u'商品'),
        'prodlot_id':fields.many2one('stock.production.lot', u'生产日期'),
        'product_qty': fields.float(u'数量', digits_compute=dp.get_precision('Product Unit of Measure')),
        'product_uom': fields.many2one('product.uom', u'计量单位'),
        'prodlot':fields.text(u'批次'),
        'rack':fields.char(u'货架', size=64),
        'orders':fields.text(u'订单'),
        'distribute':fields.text(u'分布'),
    }
okgj_multi_order_print_line()

class okgj_multi_order_print(osv.osv):
    _inherit = "okgj.multi.order.print"
    _columns = {
        'create_uid':fields.many2one('res.users', u'创建人', readonly='True'),
        'create_date':fields.datetime(u'创建时间', readonly='True'),
        'name':fields.char(u'单号', size=64),
        'warehouse_id':fields.many2one('stock.warehouse', u'物流中心', required=True),
        'picking_ids':fields.many2many('stock.picking.out', 'picking_multi_rel', 'multi_id', 'picking_id', u'发货单', domain=[('type', '=', 'out')], required=True),
        'line_ids':fields.one2many('okgj.multi.order.print.line', 'print_id', 'Lines'),
    }

    def default_get(self, cr, uid, fields, context=None):
        """
         To get default values for the object.
         @param self: The object pointer.
         @param cr: A database cursor
         @param uid: ID of the user currently logged in
         @param fields: List of fields for which we want default values
         @param context: A standard dictionary
         @return: A dictionary with default values for all field in ``fields``
        """
        if context is None:
            context = {}
        res = super(okgj_multi_order_print, self).default_get(cr, uid, fields, context=context)
        picking_ids = context and context.get('active_ids', False) or False
        if isinstance(picking_ids, (int, long)):
            picking_ids = [picking_ids]
        picking_data = self.pool.get('stock.picking.out').browse(cr, uid, picking_ids, context=context)
        #依据第一个picking判断warehouse_id，录第一个未找到，将raise异常
        warehouse_id = False
        sale = picking_data[0].sale_id  or False
        if sale:
            warehouse_id = sale.shop_id.warehouse_id.id
        sale_return = picking_data[0].sale_return_id  or False
        if sale_return:
            warehouse_id = sale_return.warehouse_id.id
        if not warehouse_id:
            raise osv.except_osv(_('Invalid Action!'), _(u"未找到默认物流中心，请重新选择"))
        res.update({'picking_ids':[(6, 0, picking_ids)], 'warehouse_id':warehouse_id}) 
        return res

    def _prepare_multi_line(self, cr, uid, picking_ids, warehouse_id, context=None):
        """
        Prepare the dict of values to create the new multi line
        """
        if context is None:
            context = {}
        uom_obj = self.pool.get('product.uom')
        print_product = {}
        res = {}
        context.update({'warehouse_id':warehouse_id})
        seq = 0
        for one_picking in self.pool.get('stock.picking.out').browse(cr, uid, picking_ids, context=context):
            seq += 1
            picking_name = one_picking.name
            move_lines = one_picking.move_lines
            for one_move in move_lines:
                product_id = one_move.product_id.id
                product_base_uom = one_move.product_id.uom_id.id
                move_uom = one_move.product_uom.id
                product_real_qty = one_move.product_qty
                if product_base_uom != move_uom:
                    product_real_qty = uom_obj._compute_qty(cr, uid, move_uom, one_move.product_qty, product_base_uom)
                #存储数据结构 print_product = {'product_id':{}}
                if print_product.get(product_id, False):
                    print_product[product_id]['product_qty'] += product_real_qty
                    #处理分布与批次
                    print_product[product_id]['orders'] =  print_product[product_id]['orders'] + ', ' + picking_name
                    print_product[product_id]['distribute'] = print_product[product_id]['distribute'] + ', ' + str(seq) + ':' + str(product_real_qty)
                    if print_product[product_id]['prodlot'] and one_move.prodlot_id and one_move.prodlot_id.name:
                        print_product[product_id]['prodlot'] += '\n' + str(seq) + ' : ' + one_move.prodlot_id.name + ' : ' + str(product_real_qty)
                else:
                    product_rack = one_move.pick_rack_id.name or one_move.store_rack_id.name or None
                    prodlot = (one_move.prodlot_id and one_move.prodlot_id.name) or None
                    prod_distribute = str(seq) + ':' + str(product_real_qty) 
                    print_product[product_id] = {
                        'product_id':product_id,
                        'product_qty':product_real_qty,
                        'product_uom':product_base_uom,
                        'rack':product_rack,
                        'orders':picking_name,
                        'prodlot':prodlot,
                        'distribute':prod_distribute,
                    }
        values = [(0, 0, print_product[product_key]) for product_key in print_product.keys()]
        res.update({'line_ids':values}) 
        return res

    def create(self, cr, uid, vals, context=None):
        if context is None:
            context = {}
        picking_ids = context and context.get('active_ids', False) or False

        if isinstance(picking_ids, (int, long)):
            picking_ids = [picking_ids]
        picking_data = self.pool.get('stock.picking.out').browse(cr, uid, picking_ids, context=context)
        #依据第一个picking判断warehouse_id，如果第一个未找到，将raise异常
        warehouse_id = False
        #处理销售单与销售退货单
        sale = picking_data[0].sale_id  or False
        if sale:
            warehouse_id = sale.shop_id.warehouse_id.id
        sale_return = picking_data[0].sale_return_id  or False
        if sale_return:
            warehouse_id = sale_return.warehouse_id.id
        if not warehouse_id:
            raise osv.except_osv(_('Invalid Action!'), _(u"未找到相应物流中心，无法继续"))
        vals.update(self._prepare_multi_line(cr, uid, picking_ids, warehouse_id, context=context))
        vals.update({'name':uuid.uuid4().hex.upper(), 'picking_ids':[(6, 0, picking_ids)], 'warehouse_id':warehouse_id})
        self.pool.get('stock.picking.out').write(cr, uid, picking_ids, {'print_state':'yes'}, context=context)
        return super(okgj_multi_order_print, self).create(cr, uid, vals, context=context)
    
    ## def write(self, cr, uid, ids, vals, context=None):
    ##     raise osv.except_osv(_('Error!'), _(u'汇拣单不允许修改!'))

    def unlink(self, cr, uid, ids, context=None):
        raise osv.except_osv(_('Error!'), _(u'汇拣单不允许删除!'))

    def do_print_sale(self, cr, uid, ids, context=None):
        '''打印'''
        assert len(ids) == 1, 'This option should only be used for a single id at a time'
        if isinstance(ids, (int, long)):
            ids = [ids]
        collect_data = self.read(cr, uid, ids, context=context)
        datas = {}
        datas.update({
            'ids':ids,
            'model':'okgj.multi.order.print',
            'form':collect_data,
            })
        return {'type': 'ir.actions.report.xml', 'report_name': 'okgj.picking.multi.print.sale', 'datas': datas, 'nodestroy': True}

    def do_print_collect(self, cr, uid, ids, context=None):
        '''打印'''
        assert len(ids) == 1, 'This option should only be used for a single id at a time'
        if isinstance(ids, (int, long)):
            ids = [ids]
        collect_data = self.read(cr, uid, ids, context=context)
        datas = {}
        datas.update({
            'ids':ids,
            'model':'okgj.multi.order.print',
            'form':collect_data,
            })
        return {'type': 'ir.actions.report.xml', 'report_name': 'okgj.picking.multi.print.collect', 'datas': datas, 'nodestroy': True}

okgj_multi_order_print()





